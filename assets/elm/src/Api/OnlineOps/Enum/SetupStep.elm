-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module OnlineOps.Enum.SetupStep exposing (..)

import Json.Decode as Decode exposing (Decoder)


type SetupStep
    = ConnectAccount
    | ConnectProperty
    | ConnectView


list : List SetupStep
list =
    [ ConnectAccount, ConnectProperty, ConnectView ]


decoder : Decoder SetupStep
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CONNECT_ACCOUNT" ->
                        Decode.succeed ConnectAccount

                    "CONNECT_PROPERTY" ->
                        Decode.succeed ConnectProperty

                    "CONNECT_VIEW" ->
                        Decode.succeed ConnectView

                    _ ->
                        Decode.fail ("Invalid SetupStep type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : SetupStep -> String
toString enum =
    case enum of
        ConnectAccount ->
            "CONNECT_ACCOUNT"

        ConnectProperty ->
            "CONNECT_PROPERTY"

        ConnectView ->
            "CONNECT_VIEW"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SetupStep
fromString enumString =
    case enumString of
        "CONNECT_ACCOUNT" ->
            Just ConnectAccount

        "CONNECT_PROPERTY" ->
            Just ConnectProperty

        "CONNECT_VIEW" ->
            Just ConnectView

        _ ->
            Nothing
