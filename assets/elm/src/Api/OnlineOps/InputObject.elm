-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module OnlineOps.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import OnlineOps.Enum.SetupStep
import OnlineOps.Interface
import OnlineOps.Object
import OnlineOps.Scalar
import OnlineOps.ScalarCodecs
import OnlineOps.Union


buildCreateSessionParams : CreateSessionParamsRequiredFields -> CreateSessionParams
buildCreateSessionParams required =
    { email = required.email }


type alias CreateSessionParamsRequiredFields =
    { email : String }


{-| Type for the CreateSessionParams input object.
-}
type alias CreateSessionParams =
    { email : String }


{-| Encode a CreateSessionParams into a value that can be used as an argument.
-}
encodeCreateSessionParams : CreateSessionParams -> Value
encodeCreateSessionParams input =
    Encode.maybeObject
        [ ( "email", Encode.string input.email |> Just ) ]


buildCreateUserParams : CreateUserParamsRequiredFields -> CreateUserParams
buildCreateUserParams required =
    { email = required.email, firstName = required.firstName, lastName = required.lastName }


type alias CreateUserParamsRequiredFields =
    { email : String
    , firstName : String
    , lastName : String
    }


{-| Type for the CreateUserParams input object.
-}
type alias CreateUserParams =
    { email : String
    , firstName : String
    , lastName : String
    }


{-| Encode a CreateUserParams into a value that can be used as an argument.
-}
encodeCreateUserParams : CreateUserParams -> Value
encodeCreateUserParams input =
    Encode.maybeObject
        [ ( "email", Encode.string input.email |> Just ), ( "firstName", Encode.string input.firstName |> Just ), ( "lastName", Encode.string input.lastName |> Just ) ]


buildMagicTokenParams : MagicTokenParamsRequiredFields -> MagicTokenParams
buildMagicTokenParams required =
    { token = required.token }


type alias MagicTokenParamsRequiredFields =
    { token : String }


{-| Type for the MagicTokenParams input object.
-}
type alias MagicTokenParams =
    { token : String }


{-| Encode a MagicTokenParams into a value that can be used as an argument.
-}
encodeMagicTokenParams : MagicTokenParams -> Value
encodeMagicTokenParams input =
    Encode.maybeObject
        [ ( "token", Encode.string input.token |> Just ) ]


buildSpaceSetupParams : SpaceSetupParamsRequiredFields -> (SpaceSetupParamsOptionalFields -> SpaceSetupParamsOptionalFields) -> SpaceSetupParams
buildSpaceSetupParams required fillOptionals =
    let
        optionals =
            fillOptionals
                { selection = Absent }
    in
    { selection = optionals.selection, step = required.step }


type alias SpaceSetupParamsRequiredFields =
    { step : OnlineOps.Enum.SetupStep.SetupStep }


type alias SpaceSetupParamsOptionalFields =
    { selection : OptionalArgument String }


{-| Type for the SpaceSetupParams input object.
-}
type alias SpaceSetupParams =
    { selection : OptionalArgument String
    , step : OnlineOps.Enum.SetupStep.SetupStep
    }


{-| Encode a SpaceSetupParams into a value that can be used as an argument.
-}
encodeSpaceSetupParams : SpaceSetupParams -> Value
encodeSpaceSetupParams input =
    Encode.maybeObject
        [ ( "selection", Encode.string |> Encode.optional input.selection ), ( "step", Encode.enum OnlineOps.Enum.SetupStep.toString input.step |> Just ) ]
